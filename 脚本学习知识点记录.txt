shell脚本中参数的使用：
$符号是参数符号，$#表示一共有多少个参数（不包含0）  $0表示执行的脚本名字 $[1-9]表示是第几个参数

bash命令：
如何设置开启生成core文件 ： ulimit -c unlimited
如何设置关闭生成core文件： ulimit -c 0
需要注意： shell脚本中，设置过一次core文件占用的容量后，下一次设置不能大于第一次设置的容量，shell脚本启动后默认不开启生成core文件，想要改大容量需要重启shell脚本。
core文件作用： core文件是程序崩溃时存储的内存的相应信息，也可以说是内存的dump，可以用于调试。

2.export命令
Linux export命令用于设置或显示环境变量。

在shell中执行程序时，shell会提供一组环境变量。export可新增，修改或删除环境变量，供后续执行的程序使用。同时，重要的一点是，export的效力仅及于该次登陆操作。注销或者重新开一个窗口，export命令给出的环境变量都不存在了。

该命令的语法如下：

export [-fnp][变量名称]=[变量设置值]
其中：

-f 　代表[变量名称]中为函数名称。
-n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。
-p 　列出所有的shell赋予程序的环境变量。
你可以只打出export来查看当前的所有环境变量。如果你要在某个环境变量（比如PATH）中加入一些新的路径（如/bin/bash），可以使用如下命令格式

export PATH=/bin/bash:$PATH
就OK了。

3.Shell中 2>/dev/null
Linux系统预留了三个文件描述符： 0，1，2 意义如下：
0： 标准输入 （stdin）
1： 标准输出   (stdout)
2： 错误输出   (stderr)
> 与 >>  重定向
>: 将指定文件清空，并把内容写入到指定文件
>>：在指定文件末尾追加内容

/dev/null是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null这个设备通常也被称为位桶（bit bucket）或黑洞。

所以，2>/dev/null的意思就是将标准错误stderr删掉。

4.grep 正则查找
注意： 以前面字符为操作参数 如 +：重复前面字符1到多次     *重复前面字符0到多次，无法连接操作 如 ：+*

\{n1,n2\}
前面的字符重复n1，n2次，
举例： o\{1,3\} 表示匹配o字符重复1-3次的字符串

传统的 grep 程序, 在没有参数的情况下, 只输出符合 RE 字符串之句子. 常见参数如下:
-v: 逆反模示, 只输出"不含" RE 字符串之句子.
-r: 递归模式, 可同时处理所有层级子目录里的文件.
-q: 静默模式, 不输出任何结果(stderr 除外. 常用以获取 return value, 符合为 true, 否则为 false .)
-i: 忽略大小写.
-w: 整词比对, 类似 \<word\> .
-n: 同时输出行号.
-c: 只输出符合比对的行数.
-l: 只输出符合比对的文件名称.
-o: 只输出符合 RE 的字符串. (gnu 新版独有, 不见得所有版本都支持.)
-E: 切换为 egrep .
注意： 只有同时输出的关键字可以叠加在其他关键词 后 同时生效。
脚本中的判断：
常用文件判断
-f ：是否是文件  可以判断该文件是否存在
常用字符串判断
-z ：字符串长度为0为真
-n:   长度非0为真
常用数值判断
n1 -eq n2   n1,n2相等为真
n1 -nq n2  n1，n2不等为真
n1 -gt n2  n1大于n2为真
n1 -ge n2  n1 大于等于n2为真
n1 -lt n2 n1小于n2为真
n1 -le n2 n1小于等于n2为真

更多其他规则：
https://blog.csdn.net/zhan570556752/article/details/80399154


==================================================main.groovy知识点
在项目中的Main.groovy的main方法中，有这么一段代码：
		def cli = new CliBuilder(usage:'build.gr [options]');
		cli.h(longOpt:'help', 'usage information')
		cli.b(longOpt:'branch',argName:'branch name',args:1,required:false, 'which branch to compile? The default is "trunk"')
		cli.u(longOpt:'username',argName:'username',args:1,required:true,'svn username')
		cli.p(longOpt:'password',argName:'password',args:1,required:true,'svn password')
		
		cli.gs(longOpt:'gsxdb',argName:'gsxdb revesion',args:1,required:false, 'gsxdb revesion')
		cli.ma(longOpt:'map',argName:'map revesion',args:1,required:false, 'map revesion')
		cli.au(longOpt:'auto',argName:'auto revesion',args:1,required:false, 'auto revesion')
		cli.gb(longOpt:'gbeans',argName:'gbeans revesion',args:1,required:false, 'gbeans revesion')
		
		
		
		def opt=cli.parse(args)
		if(!opt) return
		if(opt.h) {
		  cli.usage()
		  return
		}
这里涉及到groovy中绑定的一个阿帕奇提供的库Apache Commons CLI 库 ，作用是 ：在没有安装 Groovy 的环境下也能被即时编译和打包 Groovy 脚本
在以上代码段中，我们首先创建 cli 的实例。cli 拥有一个叫做 Usage 的属性，可以用它来显示程序的使用说明等信息。在这里，它作为参数传递给构造函数将可以告诉程序的使用者有哪些选项可以使用。接着，我们使用名字为一个字母的方法来定义命令行选项，longOpt 属性允许选项被指定为 -h 或 --help 均可。argName 属性用来指定在使用说明中显示的选项的参数名。而 args 属性用来指定选项所需的参数个数。required 属性用来告诉命令行解析器当前选项是否是必须的。函数中最后一个参数用来指定该选项的描述信息。
Parse() 方法用来解析本程序执行时命令行输入的参数。通过 Parser 解析命令行参数后，我们可以得到 OptionAccessor 对象的一个实例，当输入的参数不合法时，这个对象为空。

附带解释网址：https://www.ibm.com/developerworks/cn/java/j-lo-groovypackage/index.html